#!/usr/bin/env bash

set -euo pipefail

CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"
CURRENT_THEME_FILE="$CONFIG_DIR/current-theme"

# Available themes (add more as you create them)
AVAILABLE_THEMES=("one" "gruvbox" "everforest")

get_current_theme() {
    if [[ -f "$CURRENT_THEME_FILE" ]]; then
        cat "$CURRENT_THEME_FILE"
    else
        echo "gruvbox"  # Default
    fi
}

apply_theme() {
    local theme="$1"

    echo "Applying theme: $theme"

    # Create directories
    mkdir -p "$CONFIG_DIR"/{alacritty,hypr,waybar,qtile,rofi,dunst,wofi}

    # Link theme files (these will be generated by home-manager)
    local theme_dir="$CONFIG_DIR/unified-themes"

    # Alacritty
    if [[ -f "$theme_dir/alacritty-$theme.toml" ]]; then
        ln -sf "$theme_dir/alacritty-$theme.toml" "$CONFIG_DIR/alacritty/alacritty.toml"
        echo "✓ Applied Alacritty theme"
    fi

    # Hyprland
    if [[ -f "$theme_dir/hyprland-$theme.conf" ]]; then
        ln -sf "$theme_dir/hyprland-$theme.conf" "$CONFIG_DIR/theme-switcher/hyprland/$theme.conf"
        # Update hyprland.conf to source the new theme
        if [[ -f "$CONFIG_DIR/hypr/hyprland.conf" ]]; then
            sed -i "s|source = ~/.config/theme-switcher/hyprland/.*\.conf|source = ~/.config/theme-switcher/hyprland/$theme.conf|g" \
                "$CONFIG_DIR/hypr/hyprland.conf"
        fi
        echo "✓ Applied Hyprland theme"
    fi

    # Waybar
    if [[ -f "$theme_dir/waybar-$theme.css" ]]; then
        ln -sf "$theme_dir/waybar-$theme.css" "$CONFIG_DIR/waybar/style.css"
        echo "✓ Applied Waybar theme"
    fi

    # Qtile
    if [[ -f "$theme_dir/qtile-$theme.py" ]]; then
        ln -sf "$theme_dir/qtile-$theme.py" "$CONFIG_DIR/qtile/current_theme.py"
        echo "✓ Applied Qtile theme"
    fi

    # Rofi
    if [[ -f "$theme_dir/rofi-$theme.rasi" ]]; then
        ln -sf "$theme_dir/rofi-$theme.rasi" "$CONFIG_DIR/rofi/config.rasi"
        echo "✓ Applied Rofi theme"
    fi

    # Dunst
    if [[ -f "$theme_dir/dunst-$theme.conf" ]]; then
        ln -sf "$theme_dir/dunst-$theme.conf" "$CONFIG_DIR/dunst/dunstrc"
        echo "✓ Applied Dunst theme"
    fi

    # Wofi
    if [[ -f "$theme_dir/wofi-$theme.css" ]]; then
        ln -sf "$theme_dir/wofi-$theme.css" "$CONFIG_DIR/wofi/style.css"
        echo "✓ Applied Wofi theme"
    fi

    # Save current theme
    echo "$theme" > "$CURRENT_THEME_FILE"

    # Reload applications
    reload_apps "$theme"
}

reload_apps() {
    local theme="$1"

    # Waybar
    if pgrep waybar > /dev/null; then
        pkill waybar
        sleep 0.5
        waybar &
        disown
        echo "✓ Reloaded Waybar"
    fi

    # Hyprland
    if command -v hyprctl &> /dev/null && pgrep Hyprland > /dev/null; then
        hyprctl reload
        echo "✓ Reloaded Hyprland"
    fi

    # Qtile
    if pgrep qtile > /dev/null && command -v qtile &> /dev/null; then
        qtile cmd-obj -o cmd -f reload_config 2>/dev/null || true
        echo "✓ Reloaded Qtile"
    fi

    # Dunst
    if pgrep dunst > /dev/null; then
        pkill dunst
        sleep 0.5
        dunst &
        disown
        echo "✓ Reloaded Dunst"
    fi

    # Set wallpaper
    local wallpaper="$CONFIG_DIR/unified-themes/wallpaper-$theme"
    if [[ -f "$wallpaper" ]]; then
        if command -v waypaper &> /dev/null; then
            waypaper --wallpaper "$wallpaper" || true
        elif command -v feh &> /dev/null; then
            feh --bg-scale "$wallpaper" || true
        fi
        echo "✓ Set wallpaper"
    fi

    # Notification
    if command -v notify-send &> /dev/null; then
        notify-send "Theme Switcher" "Applied theme: $theme" -t 3000
    fi
}

show_menu() {
    local current_theme
    current_theme=$(get_current_theme)

    local menu_items=""
    for theme in "${AVAILABLE_THEMES[@]}"; do
        if [[ "$theme" == "$current_theme" ]]; then
            menu_items+="✓ $theme (current)\n"
        else
            menu_items+="  $theme\n"
        fi
    done

    local selected
    selected=$(echo -e "$menu_items" | rofi -dmenu -i -p "Select Theme:")

    if [[ -n "$selected" ]]; then
        local theme_name
        theme_name=$(echo "$selected" | sed 's/^[✓ ]*//' | sed 's/ (current)$//')
        apply_theme "$theme_name"
    fi
}

case "${1:-menu}" in
    "menu")
        show_menu
        ;;
    "set")
        if [[ -z "${2:-}" ]]; then
            echo "Usage: $0 set <theme_name>"
            echo "Available themes: ${AVAILABLE_THEMES[*]}"
            exit 1
        fi
        apply_theme "$2"
        ;;
    "current")
        get_current_theme
        ;;
    "list")
        echo "Available themes:"
        current_theme=$(get_current_theme)
        for theme in "${AVAILABLE_THEMES[@]}"; do
            if [[ "$theme" == "$current_theme" ]]; then
                echo "✓ $theme (current)"
            else
                echo "  $theme"
            fi
        done
        ;;
    *)
        echo "Usage: $0 {menu|set <theme>|current|list}"
        exit 1
        ;;
esac
