#+title: config.py

Bonjour je suis Virgil
#+begin_src python
print("Coucou Virgil")
#+end_src
* Imports
Default import, needed for the config to run. _Do not forget them !_
#+begin_src python
from libqtile import bar, layout, qtile, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from qtile_extras import widget
from qtile_extras.widget.decorations import BorderDecoration, RectDecoration
import themes
#+end_src

* Theme
Everforest is simply the best.

#+begin_src python
colors = themes.Everforest
#+end_src

* Variables

Change them to what you prefer. Emacs is my editor, the current variable stands for the emacs client. Meaning you must first run an emacs daemon somewhere.

Note that 'mod4' is the 'super' key.

#+begin_src python
mod = "mod4"
terminal = guess_terminal()
browser = "firefox"
editor = "emacsclient -c -a 'emacs' "
#+end_src

* Groups
#+begin_src python
groups = [
    Group(name='a', label=' '),
    Group(name='s', label='󰖟'),
    Group(name='d', label='󰈙'),
    Group(name='f', label=''),
    Group(name='u', label='󰍦', matches=[Match(wm_class="signal")], layout="columns"),
    Group(name='i', label='󰓇', matches=[Match(wm_class="spotify")], layout="columns"),
]
#+end_src

* Keybindings
The following tab shows all of the used kbd in the config. They are based around Vim motion kbd.

|---------------------------+-------------------------------------|
| Bind                      | Command                             |
|---------------------------+-------------------------------------|
| Mod + h/j/k/l             | Focus window left/down/up/right     |
| Mod + Shift + h/j/k/l     | Move window left/down/up/right      |
| Mod + Control + h/j/k/l   | Grow window left/down/up/right      |
| Mod + q                   | Kill focused window                 |
|---------------------------+-------------------------------------|
| Mod + Shift + return      | Split/Unsplit the stack             |
| Mod + -/=                 | Shrink/Grow window                  |
| Mod + TAB                 | Next layout                         |
| Mod + space               | Toggle fullscreen                   |
| Mod + n                   | Focus next screen                   |
| Mod + t                   | Toggle floating                     |
|---------------------------+-------------------------------------|
| Mod + Control + r         | Reload config                       |
| Mod + Control + q         | Exit Qtile                          |
|---------------------------+-------------------------------------|
| Mod + r                   | Launch app                          |
| Mod + Shift + r           | Launch command                      |
|---------------------------+-------------------------------------|
| Mod + v                   | Launch calculator                   |
| Mod + return              | Launch terminal                     |
| Mod + b                   | Launch web browser                  |
| Mod + e                   | Launch editor (Emacs client)        |
| Mod + m                   | Launch file manager                 |
| Mod + printscrn           | Take a screenshot                   |
|---------------------------+-------------------------------------|
| Mod + a/s/d/f/u/i         | Switch workspace                    |
| Mod + Shift + a/s/d/f/u/i | Switch and move window to workspace |
|---------------------------+-------------------------------------|

#+begin_src python
keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),

    # Grow/shrink windows left/right.
    # This is mainly for the 'monadtall' and 'monadwide' layouts
    # although it does also work in the 'bsp' and 'columns' layouts.
    Key([mod], "equal",
        lazy.layout.grow_left().when(layout=["bsp", "columns"]),
        lazy.layout.grow().when(layout=["monadtall", "monadwide"]),
        desc="Grow window to the left"
        ),
    Key([mod], "minus",
        lazy.layout.grow_right().when(layout=["bsp", "columns"]),
        lazy.layout.shrink().when(layout=["monadtall", "monadwide"]),
        desc="Grow window to the left"
        ),

    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key(
        [mod],
        "space",
        lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen on the focused window",
    ),
    # Move between screens
    Key([mod], "n", lazy.next_screen()),

    Key([mod], "t", lazy.window.toggle_floating(), desc="Toggle floating on the focused window"),

    Key([], "xF86AudioMute", lazy.spawn("amixer -q set Master toggle")),
    Key([], "XF86AudioLowerVolume", lazy.spawn("amixer sset Master 5%-"), desc="Lower Volume by 5%"),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("amixer sset Master 5%+"), desc="Raise Volume by 5%"),

    # brightness
    Key([], "XF86MonBrightnessUp", lazy.spawn("brightnessctl set +10%")),
    Key([], "XF86MonBrightnessDown", lazy.spawn("brightnessctl set 10%-")),

    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),

    Key([mod], "r", lazy.spawn("rofi -show drun"), desc="Launch apps"),
    Key([mod, "shift"], "r", lazy.spawn("rofi -show run"), desc="Run commands"),
    # APP
    Key([mod], "v", lazy.spawn("rofi -show calc -modi calc -no-show-match -no-sort"), desc="Launch calculator"),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod], "b", lazy.spawn(browser), desc="Launch browser"),
    Key([mod], "e", lazy.spawn(editor), desc="Launch my editor"),
    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
    Key([mod], "m", lazy.spawn("pcmanfm"), desc="Open file manager"),
    Key([mod], "Print", lazy.spawn("flameshot gui")),
]

# Add key bindings to switch VTs in Wayland.
# We can't check qtile.core.name in default config as it is loaded before qtile is started
# We therefore defer the check until the key binding is run by using .when(func=...)
for vt in range(1, 8):
    keys.append(
        Key(
            ["control", "mod1"],
            f"f{vt}",
            lazy.core.change_vt(vt).when(func=lambda: qtile.core.name == "wayland"),
            desc=f"Switch to VT{vt}",
        )
    )


# Groups
groups = [
    Group(name='a', label=' '),
    Group(name='s', label='󰖟'),
    Group(name='d', label='󰈙'),
    Group(name='f', label=''),
    Group(name='u', label='󰍦', matches=[Match(wm_class="signal")], layout="columns"),
    Group(name='i', label='󰓇', matches=[Match(wm_class="spotify")], layout="columns"),
]

for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
        ]
    )
#+end_src


** Wayland specific kbd
#+begin_src python
# Add key bindings to switch VTs in Wayland.
# We can't check qtile.core.name in default config as it is loaded before qtile is started
# We therefore defer the check until the key binding is run by using .when(func=...)
for vt in range(1, 8):
    keys.append(
        Key(
            ["control", "mod1"],
            f"f{vt}",
            lazy.core.change_vt(vt).when(func=lambda: qtile.core.name == "wayland"),
            desc=f"Switch to VT{vt}",
        )
    )
#+end_src

* Layouts
** Base settings

#+begin_src python
layout_theme = {"border_width": 3,
                "margin": 8,
                "border_focus": colors["blue"],
                "border_normal": colors["black"]
                }
#+end_src
** Layout config
#+begin_src python
layouts = [
    layout.Columns(**layout_theme,
                   border_on_single = True,
                   border_focus_stack = colors["magenta"],
                   border_normal_stack = colors["bg"]
                   ),
    layout.MonadTall(**layout_theme,
                     ratio = 0.6,
                     ),
    layout.Max(**layout_theme),
]
#+end_src
