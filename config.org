#+TITLE: Config
#+AUTHOR: Virgil Surin
#+DESCRIPTION: My own personal doom emacs config
#+STARTUP: showeverything


* Default settings

#+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-agenda-files '("~/org/agenda.org" "~/org/todo.org"))
#+end_src

** Personnal informations
#+begin_src emacs-lisp
(setq user-full-name "Virgil Surin"
      user-mail-address "virgl.surin@student.umons.ac.be")
#+end_src

** Sane default
Here are some default settings that I find sane and usefull.
#+begin_src emacs-lisp
(setq 'yes-or-no-p 'y-or-n-p)

(setq confirm-kill-emacs 'y-or-n-p)

(setq auto-save-default 1)

;; Allow for a larger memory usage to read subprocess
(setq gc-cons-threshold 100000000) ;; 100 MB
(setq read-process-output-max (* 1 1024 1024)) ;; 1 MB
#+end_src

* Lines
#+begin_src emacs-lisp
(setq display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)

(setq visual-line-mode t)
#+end_src

* Battery
#+begin_src emacs-lisp
(display-battery-mode 1)
#+end_src

* Browse dotfiles
#+begin_src emacs-lisp
(defvar vs/dotfiles "~/.dotfiles/")

(defun vs/edit-private-config ()
  "Edit personnal config files"
  (interactive)
  (find-file vs/dotfiles)
  )

;; map them
(map! :leader
      :desc "Open file in ~/.dotfiles" "f h" #'vs/edit-private-config
      )
#+end_src

* Editing keybindings
I don't use them but I input them a lot by mistake so let's unbind them.
#+begin_src emacs-lisp
(global-unset-key (kbd "M-c"))
(map! :nm
      "L" #'nil
      )
#+end_src

Unify moving between buffer and window (Qtile), it is also used to move away from vterm.
#+begin_src emacs-lisp
(map! :map 'override
      "M-h" #'evil-window-left
      "M-j" #'evil-window-down
      "M-k" #'evil-window-up
      "M-l" #'evil-window-right
      "M-w" #'evil-window-delete
      "M-W" #'delete-other-windows)
#+end_src

Move by visual line.
#+begin_src emacs-lisp
(map! :nm
      "j" #'evil-next-visual-line
      :nm
      "k" #'evil-previous-visual-line
      )
#+end_src

To do some small move in insert mode.
#+begin_src emacs-lisp
(map! :map 'evil-insert-state-map
      "C-l" #'right-char
      "C-h" #'left-char
      "C-j" #'evil-next-visual-line
      "C-k" #'evil-previous-visual-line
      )
#+end_src

Quickly type jk or kj to get back to normal mode ASAP
#+begin_src emacs-lisp
(setq evil-escape-unordered-key-sequence t)
#+end_src

Do not agregate all I do in insert mode and undo it
#+begin_src emacs-lisp
(setq evil-want-fine-undo t)
#+end_src

I want repeat to actually repeat any command
#+begin_src emacs-lisp
(map! :nm
      "." #'repeat)
#+end_src
;; tag
;;┏━━━━━━━━━━┓
;;┃    UI    ┃
;;┗━━━━━━━━━━┛
* UI
** Theme
#+begin_src emacs-lisp
(after! doom-themes
  (setq doom-themes-enable-bold 1
        doom-themes-enable-italic 1))

(setq doom-theme 'doom-one)
#+end_src
** Transparency
#+begin_src emacs-lisp
(doom/set-frame-opacity 100)

;; (set-frame-parameter nil 'alpha-background 100)
;; (add-to-list 'default-frame-alist '(alpha-background . 100))
#+end_src

** Fonts
#+begin_src emacs-lisp

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-function-name-face :slant italic)
  '(font-lock-keyword-face :weight extra-bold)
  )

(setq doom-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 16 :weight 'semibold)
      doom-variable-pitch-font (font-spec :family "Ubuntu Nerd Font" :size 16)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 22 :weight 'semibold))
#+end_src


;;; -<< Treemacs >>-
(after! treemacs
  :config
  (setf treemacs-position 'right))


;; tag
;;┏━━━━━━━━━━━┓
;;┃    Ivy    ┃
;;┗━━━━━━━━━━━┛
;; (after! ivy
;;   :config
;;         (setq swiper-use-visual-line nil)
;;         (setq ivy-height 15)
;;         (setq ivy-count-format "")
;;         (setq ivy-initial-inputs-alist nil)
;;         (setq ivy-use-virtual-buffers 1)
;;         (setq enable-recursive-minibuffers 1)
;;   )
;; (map! "C-s"  'swiper)

;; tag
;;┏━━━━━━━━━━━━━━━┓
;;┃    Consult    ┃
;;┗━━━━━━━━━━━━━━━┛

(after! consult
  :config
  (consult-customize
   consult-buffer
   consult-theme
   :preview-key 'nil))

(advice-add 'consult-line :after #'recenter-top-bottom)

(map! :nm "M-y" #'consult-yank-pop)

;; tag
;;┏━━━━━━━━━━━┓
;;┃    Avy    ┃
;;┗━━━━━━━━━━━┛

(map! :map 'evil-snipe-local-mode-map
      :nm
      "s" #'evil-avy-goto-word-1
      :nm
      "f" #'evil-avy-goto-char
      )

;; tag
;;┏━━━━━━━━━━━━━━━━━┓
;;┃    Which key    ┃
;;┗━━━━━━━━━━━━━━━━━┛
(after! which-key
  :config
  (setq which-key-idle-delay 0.5)
  )

;; tag
;;┏━━━━━━━━━━━━━┓
;;┃    Dired    ┃
;;┗━━━━━━━━━━━━━┛

(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file"           "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "w") 'wdired-change-to-wdired-mode
  (kbd "f") 'wdired-finish-edit
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'nerd-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
;; (setq dired-open-extensions '(("gif" . "sxiv")
;;                               ("jpg" . "sxiv")
;;                               ("png" . "sxiv")
;;                               ("mkv" . "mpv")
;;                               ("mp4" . "mpv")))

;; tag
;;┏━━━━━━━━━━━━━┓
;;┃    Vterm    ┃
;;┗━━━━━━━━━━━━━┛

;; pls same $PATH !
(when (daemonp)
  (exec-path-from-shell-initialize))

;; Make Vterm uses fish
(setq vterm-shell "/run/current-system/sw/bin/fish")

;; tag
;;┏━━━━━━━━━━━━━━━━━━━┓
;;┃    Programming    ┃
;;┗━━━━━━━━━━━━━━━━━━━┛

(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook 'rainbow-mode)

;; -<< Direnv >>-
(use-package! direnv
  :config
  (direnv-mode))

;; -<< Tree-sitter >>-
(use-package! treesit-auto
  :demand t
  :config
  (global-treesit-auto-mode))

;; -<< LSP >>-
(after! lsp
  :config
  (lsp-ui-mode 1)
  )

;; tag
;;┏━━━━━━━━━━━━━━┓
;;┃    Python    ┃
;;┗━━━━━━━━━━━━━━┛
;; (setq python-shell-interpreter "python3.11")
;; (setq org-babel-python-command "python3.11")
;; (setq lsp-pyright-python-executable-cmd "python3.11")

(add-hook 'python-ts-mode-hook 'python-mode)

;; tag
;;┏━━━━━━━━━━━┓
;;┃    PDF    ┃
;;┗━━━━━━━━━━━┛
(after! pdf-tools
  :ensure t)

;; tag
;;┏━━━━━━━━━━━━━┓
;;┃    LaTeX    ┃
;;┗━━━━━━━━━━━━━┛
(setq +latex-viewers '(pdf-tools evince))
(setq lsp-tex-server 'texlab)
(setq lsp-ltex-mother-tongue "fr")

(after! tex
  (map!
   :map LaTeX-mode-map
   :ei [C-return] #'LaTeX-insert-item
   :map cdlatex-mode-map
   :i "TAB" #'cdlatex-tab
   )
  (setq TeX-electric-math '("\\(" . "")))

(when EMACS28+
  (add-hook 'latex-mode-hook #'TeX-latex-mode))

;; tag
;;┏━━━━━━━━━━━━━━━━┓
;;┃    Org-mode    ┃
;;┗━━━━━━━━━━━━━━━━┛

(after! org
  (setq org-babel-default-header-args '((:session . "none")
                                       (:results . "replace")
                                       (:exports . "code")
                                       (:cache . "no")
                                       (:noweb . "no")
                                       (:hlines . "no")
                                       (:tangle . "yes")))

  (setq
   org-auto-align-tags t
   org-tags-column -0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…"
   )

  (setq org-agenda-start-on-weekday 1)
  (setq org-agenda-start-with-log-mode 0)
  (setq org-agenda-current-time-string  "◀── now ────────────────────")
  (setq org-log-done 'day)
  (setq org-log-into-drawer 0)
  (setq org-agenda-prefix-format '((agenda . "%i %-12:c%?-12t% s")
                                   (todo . "%l %i %-12:c")
                                   (tags . "%i %-12:c")
                                   (search . "%i %-12:c"))
        )
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "BUG(b)"
           "SYS(s)"
           "UNI(u)"
           "LIFE(l)"
           "MASTER(mm)"
           "EVENT(e)"
           "|"
           "DONE(d)"
           )))
  )

;; ;; -<< Org-modern >>-
;; (after! org-modern
;;   :config
;;   (setq org-modern-todo nil ; I disable this because they look bad with transparency
;;         org-modern-tag nil
;;         )
;;   )
;; (with-eval-after-load 'org (global-org-modern-mode))

;; -<< Org-capture >>-
(defun gkh/project-current-name ()
"Get the name of the current project by returning the project name for DIR."
(if (string-match "/\\([^/]+\\)/\\'" (project-root (project-current t)))
    (match-string 1 (project-root (project-current t)))
  (project-root (project-current t))))


(after! org
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/todo.org" "Tasks")
           "* TODO %?\n")
          ("p" "Project todo" entry (file+headline "~/org/todo.org" "Projects")
           "* TODO %? :%(gkh/project-current-name):\n%a")
          ("b" "Bugs" entry (file+headline "~/org/todo.org" "Bugs")
           "* BUG %? :%(gkh/project-current-name):\n%a")
          ))
  )

;; tag
;;┏━━━━━━━━━━━━━━━━━━┓
;;┃    Org-agenda    ┃
;;┗━━━━━━━━━━━━━━━━━━┛

;; (use-package! org-super-agenda
;;   :commands org-super-agenda-mode)

(after! org-agenda
  (let ((inhibit-message 1))
    ;; (org-super-agenda-mode)
    ))

(setq org-agenda-skip-scheduled-if-done 1
      org-agenda-skip-deadline-if-done 1
      org-agenda-include-deadlines 1
      org-agenda-tags-column 80 ;; from testing this seems to be a good value
      org-agenda-sorting-strategy '((agenda habit-down time-up urgency-down category-keep)
                                   (todo tag-up category-keep)
                                   (tags tag-up category-keep)
                                   (search tag-up category-keep))
      )

(setq org-agenda-custom-commands
      '(("a" "Overview"
         (
          (agenda "" ((org-agenda-span 10)
                      (org-super-agenda-groups
                       '((:name "Agenda"
                          :time-grid t
                          :todo "EVENT"
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "TODOs"
                           :todo "TODO"
                           :order 1)
                          (:name "Projects"
                           :todo "TODO"
                           :order 2)
                          (:name "Bugs"
                           :todo "BUG"
                           :order 3)
                          (:name "Unif"
                           :todo "UNI"
                           :order 4)
                          )))))))
      )


(provide 'config)

;;  ┏━━━━━━━━━━━━━┓
;;; ┃    Email    ┃
;;  ┗━━━━━━━━━━━━━┛
;; TODO


;;; config.el ends here
